一）GC(垃圾回收器)
在Java中，对象实例都是在堆上创建
GC机制是有JVM提供的，用来清理需要清除的对象，回收堆内存
在java中，GC是由一个被称为垃圾回收器的守护线程执行的
在从内存回收一个对象之前会调用对象的finalize()
GC的触发由JVM依据堆内存的大小来决定，开发者不能控制
GC算法：1）标记清除算法。首先标记处所有需要回收的对象，在统一回收所有被标记的对象，缺点是效率不高并且会产生不连续的内存碎片
2）复制算法
3）标记整理算法
二）HashMap、Hashtable（未看）
HashMap线程不安全
https://yemengying.com/2016/02/03/%E8%AF%91-Java%E4%B8%ADHashMap%E5%92%8CLinkedHashMap%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81/
三）异常处理
https://blog.csdn.net/hguisu/article/details/6155636
四）锁
悲观锁（Pessimistic Lock）：
每次拿数据的时候都会担心会被别人修改（疑心重很悲观），所以每次在拿数据的时候都会上锁。确保自己使用的过程中不会被别人访问，自己使用完后再解锁。
期间需要访问该数据的都会等待。
乐观锁（Optimistic Lock）：
每次拿数据的时候都完全不担心会被别人修改（心态好很乐观），所以每次在拿数据的时候都不会上锁。但是在更新数据的时候去判断该期间是否被别人修改过（使用版本号等机制），期间该数据可以随便被其他人读取。

乐观锁比较适合数据修改比较少，读取比较频繁的场景

乐观锁应用
1.使用自增长的整数表示数据版本号。更新时检查版本号是否一致，比如数据库中数据版本为6，更新提交时version=6+1,使用该version值(=7)与数据库version+1(=7)作比较，如果相等，则可以更新，如果不等则有可能其他程序已更新该记录，所以返回错误。
2.使用时间戳来实现.
悲观锁应用
需要使用数据库的锁机制

五）spring
IoC的核心是依赖反转，将创建对象和对象之间的依赖管理交给IoC容器来做，完成对象之间的解耦。
AOP主要是利用代理模式，把许多接口都要用的又和接口本身主要的业务逻辑无关的部分抽出来，写成一个切面，单独维护，比如权限验证。
这样可以使接口符合“单一职责原则”，只关注主要的业务逻辑，也提高了代码的重用性
AOP的应用场景是权限、日志、处理异常、事务等等。

六）Redis
Redis提供哪几种数据结
一共有5种，字符串，散列，列表，集合，有序集合。

七）多线程
两种方式实现多线程，继承java.lang.Thread类和实现java.lang.Runnable接口
Thread其实就是实现了Runnable
实现Runnable接口比继承Thread类所具有的优势：
1）：适合多个相同的程序代码的线程去处理同一个资源
2）：可以避免java中的单继承的限制
3）：增加程序的健壮性，代码可以被多个线程共享，代码和数据独立
4）：线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类
常用函数说明:
1）sleep:在指定的毫秒数内让当前正在执行的线程休眠
2）join：指等待t线程终止（如果主线程需要子线程的结果，就要用join）
3）yield:暂停当前正在执行的线程对象，并执行其他线程
sleep()和yield()的区别):sleep()使当前线程进入停滞状态，所以执行sleep()的线程在指定的时间内肯定不会被执行；
yield()只是使当前线程重新回到可执行状态，所以执行yield()的线程有可能在进入到可执行状态后马上又被执行。
4）setPrioity:更改线程的优先级
5）CountDownLatch
final CountDownLatch countDownLatch = new CountDownLatch(2);
countDownLatch.await();//表示等待2个线程运行完后再进行
countDownLatch.countDown()
CountDownLatch最重要的方法是countDown()和await()，前者主要是倒数一次，后者是等待倒数到0，如果没有到达0，就只有阻塞等待了。
6）内部类
内部类只能由该非静态方法访问
7）synchronized
a)该关键字不能继承，可以定义方法
在定义接口方法时不能使用
b)代码块，在同一时刻只能有一个线程得到执行，其他线程受阻塞
c）当一个线程访问对象的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该对象中的
非synchronized(this)同步代码块
4）对象
用synchronized给account对象加了锁，当一个线程访问account对象时，其他试图访问account对象
的线程将会阻塞。
当有明确的对象作为锁时，synchronized(obj)
当没有明确对象作为锁时，synchronized(lock)
5）修饰一个类
class ClassName {  
   public void method() {  
      synchronized(ClassName.class) {  
         // todo  
      }  
   }  
}  
总结
A. 无论synchronized关键字加在方法上还是对象上，如果它作用的对象是非静态的，则它取得的锁是对象；如果synchronized作用的对象是一个静态方法或一个类，则它取得的锁是对类，该类所有的对象同一把锁。 
B. 每个对象只有一个锁（lock）与之相关联，谁拿到这个锁谁就可以运行它所控制的那段代码。 
C. 实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。

八）竞态条件
多线程对一些资源的竞争的时候就会产生竞态条件，如果首先要执行的程序竞争失败排到后面执行了，
就会出现一些不确定的bug
解决方法用synchronized

九）notify()和notifyAll（）
notify只能唤醒一个线程
notifyAll唤醒所有线程，并允许他们争夺资源

十）为什么wait, notify 和 notifyAll这些方法不在thread类里面？
这些方法都在Object类里
由于wait,notify,notifyAll都是锁级别的操作，所以把他们定义在Object类中因为锁属于对象

十一）为什么wait和notify方法要在同步块中调用？
主要是因为Java API强制要求这样做，如果你不这么做，你的代码会抛出IllegalMonitorStateException异常。
还有一个原因是为了避免wait和notify之间产生竞态条件。

